#Notes: Scrapped most of the code as I realized it didn't do exactly what the assignment wanted.
#Notes: New code allows user to select a base and a scatter object, then create instances of the scatter object on the vertices of the base object.
#Notes: Need to fix slider and add functionality to the rest of the UI.

import logging

from PySide2 import QtWidgets, QtCore
from shiboken2 import wrapInstance
import maya.OpenMayaUI as omui
import maya.cmds as cmds
import pymel.core as pmc
from pymel.core.system import Path

log = logging.getLogger(__name__)

polygon_base_chosen = int(0)
polygon_scatter_chosen = int(0)

polygon_base = ''
vtx = ''
vertices = ''


def maya_main_window():
    """Return the maya main window widget"""
    main_window = omui.MQtUtil.mainWindow()
    return wrapInstance(long(main_window), QtWidgets.QWidget)


class ScatterToolGUI(QtWidgets.QDialog):
    """Scatter Tool GUI Class"""
    def __init__(self):
        """Constructor"""
        super(ScatterToolGUI, self).__init__(parent=maya_main_window())
        self.setWindowTitle("Scatter Tool")
        self.setMinimumWidth(500)
        self.setMaximumWidth(500)
        self.setMaximumHeight(200)
        self.setWindowFlags(self.windowFlags() ^
                            QtCore.Qt.WindowContextHelpButtonHint)
        self.create_ui()
        self.create_connections()

    """Creates UI Layout"""
    def create_ui(self):
        """Title labels"""
        self.title_lbl = QtWidgets.QLabel("Scatter Tool")
        self.title_lbl.setStyleSheet("font: bold 20px")
        """Polygon base"""
        self.polygon_base_lbl = QtWidgets.QLabel("Select a Unique object for"
                                                 " the base")
        self.polygon_base_lay = self._create_polygon_base_ui()
        """Polygon scatter"""
        self.polygon_scatter_lbl = QtWidgets.QLabel("Select a Unique object to Scatter"
                                                    " on base")
        self.polygon_scatter_lay = self._create_polygon_scatter_ui()
        """Scatter Tool Button"""
        self.scatter_tool_button_lay = self._create_scatter_button()
        """Density"""
        self.density_lbl = QtWidgets.QLabel("Density")
        self.density_lay = self._create_density_ui()
        """Scale"""
        self.scale_lbl = QtWidgets.QLabel("Scale")
        """Rotation"""
        self.rotation_lbl = QtWidgets.QLabel("Rotation")
        self.rotation_lay = self._create_rotation_ui()
        """Additional Feature"""

        """Layout for buttons"""
        self.button_lay = self._create_button_ui()
        """Main layout for main window"""
        self.main_lay = QtWidgets.QVBoxLayout()
        self.main_lay.addWidget(self.title_lbl)
        """Polygon base added to window"""
        self.main_lay.addWidget(self.polygon_base_lbl)
        self.main_lay.addLayout(self.polygon_base_lay)
        """Polygon Scatter added to window"""
        self.main_lay.addWidget(self.polygon_scatter_lbl)
        self.main_lay.addLayout(self.polygon_scatter_lay)
        """Scatter_tool button added to window"""
        self.main_lay.addLayout(self.scatter_tool_button_lay)
        """Density scroll bar added to window"""
        self.main_lay.addWidget(self.density_lbl)
        self.main_lay.addLayout(self.density_lay)
        """Scale scroll bar added to window"""
        self.main_lay.addWidget(self.scale_lbl)
        """Rotation added to window"""
        self.main_lay.addWidget(self.rotation_lbl)
        self.main_lay.addLayout(self.rotation_lay)
        """Adds stretch to window"""
        self.main_lay.addStretch()
        #self.main_lay.addLayout(self.button_lay)
        self.setLayout(self.main_lay)

    """Creates polygon base layout"""
    def _create_polygon_base_ui(self):
        self.polygon_base_le = QtWidgets.QLineEdit('Unique object for the base')
        self.polygon_base_le.setFixedWidth(200)
        self.polygon_base_button = QtWidgets.QPushButton("Choose Base")
        layout = QtWidgets.QHBoxLayout()
        layout.addWidget(self.polygon_base_le)
        layout.addWidget(self.polygon_base_button)
        return layout

    def _create_polygon_scatter_ui(self):
        self.polygon_scatter_le = QtWidgets.QLineEdit('Unique object for scatter')
        self.polygon_scatter_le.setFixedWidth(200)
        self.polygon_scatter_button = QtWidgets.QPushButton("Choose Scatter")
        layout = QtWidgets.QHBoxLayout()
        layout.addWidget(self.polygon_scatter_le)
        layout.addWidget(self.polygon_scatter_button)
        return layout

    def _create_scatter_button(self):
        self.scatter_tool_button = QtWidgets.QPushButton("Scatter")
        layout = QtWidgets.QHBoxLayout()
        layout.addWidget(self.scatter_tool_button)
        return layout

    def _create_density_ui(self):
        self.density_slider = QtWidgets.QSlider()
        self.density_slider.setTickInterval(10)
        self.density_slider.setMinimum(0)
        self.density_slider.setMaximum(100)
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.density_slider)
        return layout

    def _create_rotation_ui(self):
        self.x_box_le = QtWidgets.QLineEdit('1')
        self.x_box_le.setFixedWidth(30)
        self.y_box_le = QtWidgets.QLineEdit('1')
        self.y_box_le.setFixedWidth(30)
        self.z_box_le = QtWidgets.QLineEdit('1')
        self.z_box_le.setFixedWidth(30)
        self.rotation_spacer = QtWidgets.QLabel(' ')
        layout = QtWidgets.QGridLayout()
        layout.addWidget(QtWidgets.QLabel("X"), 1, 0)
        layout.addWidget(self.x_box_le, 1, 1)
        layout.addWidget(QtWidgets.QLabel("Y"), 1, 2)
        layout.addWidget(self.y_box_le, 1, 3)
        layout.addWidget(QtWidgets.QLabel("Z"), 1, 4)
        layout.addWidget(self.z_box_le, 1, 5)
        layout.addWidget(self.rotation_spacer, 1, 6)
        layout.addWidget(self.rotation_spacer, 1, 7)
        layout.addWidget(self.rotation_spacer, 1, 8)
        layout.addWidget(self.rotation_spacer, 1, 9)
        layout.addWidget(self.rotation_spacer, 1, 10)
        layout.addWidget(self.rotation_spacer, 1, 11)
        return layout

    def create_connections(self):
        self.polygon_base_button.clicked.connect(self._polygon_base_selected)
        self.polygon_scatter_button.clicked.connect(self._polygon_scatter_selected)
        self.scatter_tool_button.clicked.connect(self._scatter_tool_activated)

    """Changes the Rotation of polygon_scatter objects based on the text"""
    """in the line edit boxes of X, Y, and Z"""
    """def _rotate_polygon_scatter(self):"""
    """add code to look for polygon_scatter objects and change"""
    """their X, Y, and Z rotations"""
    """if cmds.objExists(all polygon scatter objects):"""
    """some code to change rotations"""

    def _polygon_base_selected(self):
        base_selected = cmds.ls(selection=True)
        self.polygon_base_le.setText(base_selected[0])

    def _polygon_scatter_selected(self):
        scatter_selected = cmds.ls(selection=True)
        self.polygon_scatter_le.setText(scatter_selected[0])

    def _scatter_tool_activated(self):
        print("Pressed button")
        print(self.polygon_base_le.text())
        # cmds.polyCube(n='cube_scatter')
        obj = self.polygon_base_le.text()
        obj2 = self.polygon_scatter_le.text()

        vtx = cmds.ls(obj + '.vtx[*]', fl=True)
        cmds.select(vtx)
        for item in vtx:
            position = cmds.pointPosition(item)
            scatter_instance = cmds.instance(obj2, n='scatter_object')
            cmds.move(position[0], position[1], position[2], scatter_instance, worldSpace=True)

    """Creates button layout"""
    def _create_button_ui(self):
        self.save_btn = QtWidgets.QPushButton("Save")
        self.save_increment_btn = QtWidgets.QPushButton("Save Increment")
        layout = QtWidgets.QHBoxLayout()
        layout.addWidget(self.save_btn)
        layout.addWidget(self.save_increment_btn)
        return layout
